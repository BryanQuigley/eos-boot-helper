#!/usr/bin/python3 -u

import os
import subprocess
import re
import sys
import json

class BootUpgradeException(Exception):
    def __init__(self, *args):
        self.msg = ' '.join(map(str, args))

    def __str__(self):
        return str(self.msg)

class Partition(object):
    def __init__(self, part_number, disk):
        self.disk = disk
        self.partition_number = part_number

    @staticmethod
    def parse(config, disk):
        part_number = re.match('^.*([0-9]+)$', config['node']).group(1)
        part_config = {
            'node': config['node'],
            'uuid': config['uuid'] if 'uuid' in config else None,
            'type': config['type'] if 'type' in config else None
        }
        return Partition(part_number, disk)

    def get_partition_number(self):
        return self.partition_number

class BootingDisk(object):
    def __init__(self):
        self.boot_device = None
        self.root_device = None
        self.label = None
        self.partitions = {}

        self._get_booting_device()
        self._read_partition_table()

    def _get_booting_device(self):
        root_dev = subprocess.check_output([
            'systemctl', 'show', '-p', 'What', 'sysroot.mount'
            ]).decode('utf-8').strip()
    
        root_dev = root_dev[5:]
        if not root_dev:
            raise BootUpgradeException('Could not identify root device')

        self.root_device = root_dev

        boot_dev = re.sub('(p[0-9]+)$', "", root_dev)
        if root_dev != boot_dev:
            self.boot_device = boot_dev
        else:
            self.boot_device = re.sub('([0-9]+)$', "", root_dev)

    def _read_partition_table(self):
        sfdisk_json = subprocess.check_output(['sfdisk', '--json', self.boot_device]).decode('utf-8');
        disk_config = json.loads(sfdisk_json)

        self.label = disk_config['partitiontable']['label'] or None

        for part_config in disk_config['partitiontable']['partitions']:
            part = Partition.parse(part_config, self)
            self.partitions[part.get_partition_number()] = part

def get_ESP(root_disk):
    esp_guid = 'C12A7328-F81F-11D2-BA4B-00A0C93EC93B'
    esp_part = None

    disk_config = json.loads(subprocess.check_output(['sfdisk', '--json', root_disk]).decode('utf-8'))
    for partition_config in disk_config['partitiontable']['partitions']:
        if partition_config['type'] == esp_guid:
            esp_part = partition_config['node']
            break

    if not esp_part:
        raise BootUpgradeException('ESP not found')

    if not re.match('.*1$', esp_part):
        raise BootUpgradeException('ESP is not the first partition')

    return esp_part

def do_uefi_upgrade():
    try:
        disk = BootingDisk()
        print('[*] Root partition: ' + disk.root_device)
        print('[*] Booting disk: ' + disk.boot_device)
        print('[*] Partition table: ' + disk.label)

    except BootUpgradeException as BUException:
        print(BUException)
    except subprocess.CalledProcessError as CPError:
        print(CPError)

def is_dual_boot():
    with open('/proc/cmdline', 'r') as f:
        line = f.readline()
        if line:
            line.strip().split('\0')

    return 'endless.image.device' in line

if is_dual_boot():
    sys.exit('Dual boot detected. Bailing out.')

if os.path.exists('/sys/firmware/efi'):
    print('Starting UEFI upgrade...')
    do_uefi_upgrade()
else:
    sys.exit('BIOS upgrade not yet implemented')
