#!/usr/bin/python3 -u

import os
import subprocess
import re
import sys
import json

class BootUpgradeException(Exception):
    def __init__(self, *args):
        self.msg = ' '.join(map(str, args))

    def __str__(self):
        return str(self.msg)

class Partition(object):
    def __init__(self, part_number, disk, **kwargs):
        self.disk = disk
        self.number = part_number
        for config_name in kwargs:
            setattr(self, config_name, kwargs[config_name])

    @staticmethod
    def parse(config, disk):
        if 'node' not in config:
            raise BootUpgradeException('sfdisk error') 

        part_number = re.match('^.*([0-9]+)$', config['node']).group(1)
        part_config = {
            'device': config['node'],
            'uuid': config['uuid'] if 'uuid' in config else None,
            'type': config['type'] if 'type' in config else None
        }
        return Partition(part_number, disk, **part_config)

    def get_partition_number(self):
        return self.number

class Disk(object):
    def __init__(self, device):
        self.label = None
        self.partitions = {}
        self.device = device

        self._read_partition_table()

    def _read_partition_table(self):
        sfdisk_json = subprocess.check_output(['sfdisk', '--json', self.device]).decode('utf-8');
        disk_config = json.loads(sfdisk_json)

        self.label = disk_config['partitiontable']['label'] or None

        for part_config in disk_config['partitiontable']['partitions']:
            part = Partition.parse(part_config, self)
            self.partitions[part.get_partition_number()] = part

    def get_partition_by_guid(self, guid):
        for part_num, conf in self.partitions.items():
            if conf.type == guid:
                return self.partitions[part_num]
        return None

class BootDisk(Disk):
    def __init__(self):
        super().__init__(self._get_booting_device())

    def _get_booting_device(self):
        root_part_device = subprocess.check_output([
            'systemctl', 'show', '-p', 'What', 'sysroot.mount'
            ]).decode('utf-8').strip()
    
        root_part_device = root_part_device[5:]
        if not root_part_device:
            raise BootUpgradeException('Could not identify root device')

        boot_disk_device = re.sub('(p[0-9]+)$', "", root_part_device)
        if root_part_device == boot_disk_device:
            boot_disk_device = re.sub('([0-9]+)$', "", root_part_device)

        return boot_disk_device

def do_uefi_upgrade():
    try:
        disk = BootDisk()
        print('[*] Booting disk: ' + disk.device)
        print('[*] Partition table: ' + disk.label)

        root_partition = disk.get_partition_by_guid('4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709')
        if not root_partition:
            raise BootUpgradeException('root partition not found')
        print('[*] Root partition: ' + root_partition.device)

        esp_partition = disk.get_partition_by_guid('C12A7328-F81F-11D2-BA4B-00A0C93EC93B')
        if not esp_partition:
            raise BootUpgradeException('ESP partition not found')
        if not re.match('.*1$', esp_partition.device):
            raise BootUpgradeException('ESP is not the first partition')
        print('[*] ESP partition: ' + esp_partition.device)

    except BootUpgradeException as BUException:
        print(BUException)
    except subprocess.CalledProcessError as CPError:
        print(CPError)

def is_dual_boot():
    with open('/proc/cmdline', 'r') as f:
        line = f.readline()
        if line:
            line.strip().split('\0')

    return 'endless.image.device' in line

if is_dual_boot():
    sys.exit('Dual boot detected. Bailing out.')

if os.path.exists('/sys/firmware/efi'):
    print('Starting UEFI upgrade...')
    do_uefi_upgrade()
else:
    sys.exit('BIOS upgrade not yet implemented')
