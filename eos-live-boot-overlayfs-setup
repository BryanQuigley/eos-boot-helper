#!/bin/bash
# Mount overlays over any directory that might be written to

EXTRA_PATHS=$@

# Allow xattrs in the user namespace on /run, and by extension in the ostree
# repo, where they are used to record permissions when run as an unprivileged
# user.
mount -o remount,user_xattr /run

# /sysroot/ostree needs special handling:
setup_ostree_flatpak_overlay() {
    # The flatpak deployment dirs must be on the same filesystem (namely
    # /sysroot) as the ostree repo, so files can be hardlinked between them
    # rather than copied. We normally achieve this with these symlinks:
    #
    # /var/lib/flatpak      --> /sysroot/flatpak
    # /sysroot/flatpak/repo --> /ostree/repo
    # /ostree               --> /sysroot/ostree
    #
    # For a live boot, we cannot overlay /sysroot directly: we need to read an
    # xattr from the real (lower) directory, but if the upper dir exists (which
    # it always does at the root of the mount!) then overlayfs returns xattrs
    # from that. But if we put separate overlays on /sysroot/ostree and
    # /sysroot/flatpak, hardlinks between them do not work.
    #
    # It just so happens that the only entry that /sysroot/ostree and
    # /sysroot/flatpak have in common is 'repo', which is meant to be identical
    # anyway. So, we merge both directories together over /sysroot/ostree:
    local lowerdir=/sysroot/ostree:/sysroot/flatpak
    local upperdir=/run/eos-live/ostree-flatpak
    local workdir=$upperdir-workdir
    [ -d $workdir ] && return;
    mkdir -p $upperdir $workdir
    mount -t overlay -o \
        rw,upperdir=$upperdir,lowerdir=$lowerdir,workdir=$workdir \
        eos-live-ostree-flatpak /sysroot/ostree

    # Adjust the symlink to point to this ostree/flatpak chimera:
    rm -f /var/lib/flatpak
    ln -s /sysroot/ostree /var/lib/flatpak

    # And leave /sysroot/flatpak uncovered; since it is only ever referenced
    # via the /var/lib/flatpak symlink.
}

setup_overlay() {
    local dir=$1
    local target=${2:-/$dir}
    [ -d /$dir ] || return
    [ -d /run/eos-live/$dir ] && return
    # If the directory is a symlink, assume it's pointing to a location
    # covered by another top level overlay
    [ -L /$dir ] && return
    mkdir -p /run/eos-live/$dir /run/eos-live/$dir-workdir
    mount -t overlay -o \
        rw,upperdir=/run/eos-live/$dir,lowerdir=/$dir,workdir=/run/eos-live/$dir-workdir \
        eos-live-$dir $target
}

# Setup /etc overlay at a special temporary location first, so that we can
# atomically take care of /etc/machine-id presence.
mkdir /run/etc.tmp
setup_overlay etc /run/etc.tmp

# If we booted and systemd was unable to find or create a machine-id,
# it will create one at /run/machine-id and bind mount it at /etc/machine-id.
# But the overlay we just set up at /run/etc.tmp does not include that child
# bind mount, so in the case where this is a brand new empty overlay, we're
# back to having no machine-id there.
#
# In addition to recovering the machine-id, we also want to use this
# opportunity to store it in the overlayfs, in case the overlayfs is backed
# by persistent storage.
#
# Both goals can be satisfied in simplistic fashion by copying systemd's
# boot-generated machine-id into place, in the case where we didn't find one
# in the overlay.

if [[ ! -s /run/etc.tmp/machine-id && -s /run/machine-id ]]; then
  cp /run/machine-id /run/etc.tmp/machine-id
fi

# Atomically move our /etc overlay into the right place
mount --move /run/etc.tmp /etc
rmdir /run/etc.tmp

# Everything else but /sysroot/{ostree,flatpak} is pretty straightforward:
overlay_dirs="bin boot endless home lib opt ostree root sbin srv sysroot/home var"
for dir in $overlay_dirs $EXTRA_PATHS; do
    setup_overlay $dir
done

# Once /var is writable, we can set up the special ostree+flatpak overlay:
setup_ostree_flatpak_overlay
