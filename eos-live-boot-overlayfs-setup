#!/bin/bash
# Mount overlays over any directory that might be written to

EXTRA_PATHS=$@

# Allow xattrs in the user namespace on /run, and by extension in the ostree
# repo, where they are used to record permissions when run as an unprivileged
# user.
mount -o remount,user_xattr /run

# Attempt to find the partition to act as backing storage for the overlayfses
find_storage_partition() {
	local bootdev=$(grep -oP "endless\.image\.device=UUID=[^ ]+" /proc/cmdline)
	bootdev=${bootdev:21}
	[ -n "${bootdev}" ] || return 1

	local root_partition=$(blkid --output device --match-token "${bootdev}")
	[ -b "${root_partition}" ] || return 1

	# Check for ISO layout - root partition is partition 1, storage partition
	# exists at partition 3.
	[ "${root_partition: -1}" == "1" ] || return 1

	local storage_partition=${root_partition:0:-1}3
	[ -b "${storage_partition}" ] || return 1

	echo "${storage_partition}"
	return 0
}

setup_and_mount_storage() {
	local device=$1
	local marker
	[ -b "${device}" ] || return 1

	# Check for the marker installed at partition creation time.
	# If found, we know we've found the right partition and it's ready
	# for formatting.
	read -r -d '' -N 27 marker < ${device}
	if [ "${marker}" = "endless_live_storage_marker" ]; then
		mke2fs -t ext4 -O dir_index,^huge_file -m 1 -L endless-live \
			"${device}"
		# let udev become aware of new device filesystem and label
		udevadm settle
	fi

	# Check the partition label
	label=$(lsblk -d -n -o LABEL "${device}")
	[ "${label}" = "endless-live" ] || return 1

	mkdir -p /run/eos-live
	mount "${device}" /run/eos-live
}

# /sysroot/ostree needs special handling:
setup_ostree_flatpak_overlay() {
    # The flatpak deployment dirs must be on the same filesystem (namely
    # /sysroot) as the ostree repo, so files can be hardlinked between them
    # rather than copied. We normally achieve this with these symlinks:
    #
    # /var/lib/flatpak      --> /sysroot/flatpak
    # /sysroot/flatpak/repo --> /ostree/repo
    # /ostree               --> /sysroot/ostree
    #
    # For a live boot, we cannot overlay /sysroot directly: we need to read an
    # xattr from the real (lower) directory, but if the upper dir exists (which
    # it always does at the root of the mount!) then overlayfs returns xattrs
    # from that. But if we put separate overlays on /sysroot/ostree and
    # /sysroot/flatpak, hardlinks between them do not work.
    #
    # It just so happens that the only entry that /sysroot/ostree and
    # /sysroot/flatpak have in common is 'repo', which is meant to be identical
    # anyway. So, we merge both directories together over /sysroot/ostree:
    local lowerdir=/sysroot/ostree:/sysroot/flatpak
    local upperdir=/run/eos-live/ostree-flatpak
    local workdir=$upperdir-workdir
    [ -d $workdir ] && return;
    mkdir -p $upperdir $workdir
    mount -t overlay -o \
        rw,upperdir=$upperdir,lowerdir=$lowerdir,workdir=$workdir \
        eos-live-ostree-flatpak /sysroot/ostree

    # Adjust the symlink to point to this ostree/flatpak chimera:
    rm -f /var/lib/flatpak
    ln -s /sysroot/ostree /var/lib/flatpak

    # And leave /sysroot/flatpak uncovered; since it is only ever referenced
    # via the /var/lib/flatpak symlink.
}

setup_overlay() {
    local dir=$1
    [ -d /$dir ] || return
    # If the directory is a symlink, assume it's pointing to a location
    # covered by another top level overlay
    [ -L /$dir ] && return
    mkdir -p /run/eos-live/$dir /run/eos-live/$dir-workdir
    mount -t overlay -o \
        rw,upperdir=/run/eos-live/$dir,lowerdir=/$dir,workdir=/run/eos-live/$dir-workdir \
        eos-live-$dir /$dir
}

# Use persistent storage to back overlayfses, if available
storage_partition=$(find_storage_partition)
if [ -b "${storage_partition}" ]; then
	setup_and_mount_storage "${storage_partition}"
fi

# If we booted and systemd was unable to find or create a machine-id,
# it will create one at /run/machine-id and bind mount it at /etc/machine-id.
# But when we create the /etc overlay, we will lose that bind mount.
#
# Here we create the overlay upperdir in advance, pre-seeding systemd's
# boot-generated machine-id before we create the overlay. This way, we avoid
# any points during the transition where /etc/machine-id is missing.
mkdir -p /run/eos-live/etc
if [[ -s /run/machine-id ]]; then
  cp /run/machine-id /run/eos-live/etc/machine-id
fi

# Everything but /sysroot/{ostree,flatpak} is pretty straightforward:
overlay_dirs="etc bin boot endless home lib opt ostree root sbin srv sysroot/home var"
for dir in $overlay_dirs $EXTRA_PATHS; do
    setup_overlay $dir
done

# Once /var is writable, we can set up the special ostree+flatpak overlay:
setup_ostree_flatpak_overlay
