#!/bin/bash -e
# Copyright (C) 2016 Endless Mobile, Inc.
# Licensed under the GPLv2

# arguments checking
if [ $# -lt 1 ]; then
	echo "Usage: $0 <EOS partition>"
	exit 1
fi

root_part="$1"
root_partno="${root_part: -1}"
root_part_base="${root_part:: -1}"
eval $(lsblk -o PKNAME,PARTTYPE "${root_part}" --paths --pairs --nodeps)
root_disk="$PKNAME"
root_guid="$PARTTYPE"

swap_partno=$((root_partno + 1))
swap_part="${root_part_base}${swap_partno}"

# check if we passed the full device file path
if [ "${root_part//dev/}" = "${root_part}" ]; then
	echo "$0: Specify the full path for the root device file (i.e. /dev/sda3)"
	exit 1
fi

# check if we passed the device file for the partition and not for the disk
case ${root_partno} in
	*[!0-9]* )
		echo "$0: Specify the root partition (i.e. /dev/sda3)"
		exit 1
		;;
esac

# check if the root partition does exist (if it exists we assume $root_disk does exist too)
if [ ! -e "${root_part}" ]; then
  echo "$0: $root_part doesn't exist"
  exit 1
fi

# udev might still be busy probing the disk, meaning that it will be in use.
udevadm settle

# take current partition table
parts=$(sfdisk -d $root_disk)

# check against the DiscoverablePartitionsSpec partition type UUIDs
dps_root_guid="4F68BCE3-E8CD-4DB1-96E7-FBCAF984B709"
if [ "${root_guid^^}" != "${dps_root_guid^^}" ]; then
	echo "$0: $root_part doesn't have the correct GUID (read $root_guid)"
	exit 1
fi

# check the last partition on the disk
lastpart=$(echo "$parts" | sed -n -e '$ s/[^:]*\([0-9]\) :.*$/\1/p')

if [ $lastpart -eq $swap_partno ]; then
  # already have an extra partition, perhaps we were halfway through creating
  # a swap partition but didn't finish. Remove it to try again below.
  parts=$(echo "$parts" | sed '$d')
elif [ $lastpart -gt $swap_partno ]; then
  echo "repartition: found $lastpart partitions?"
  exit 1
fi

find_and_remove_partition() {
	local name=${1:?No name supplied to ${FUNCNAME}}
	local guid=${2:?No GUID supplied to ${FUNCNAME}}

	if ! echo "$parts" | grep -q "$guid"; then
		echo "$0: $name not found"
		exit 1
	fi

	parts=$(echo "$parts" | grep -v "$guid")
}

find_and_remove_partition "ESP" "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
find_and_remove_partition "BIOS boot" "21686148-6449-6E6F-744E-656564454649"

# calculate new partition sizes
disk_size=$(blockdev --getsz $root_disk)
part_size=$(blockdev --getsz $root_part)
part_start=$(echo "$parts" | sed -n -e '$ s/.*start=[ ]\+\([0-9]\+\).*$/\1/p')
part_end=$(( part_start + part_size ))
echo "Dsize $disk_size Psize $part_size Pstart $part_start Pend $part_end"

# Calculate the new root partition size, assuming that it will expand to fill
# the remainder of the disk
new_size=$(( disk_size - part_start ))

# If we find ourselves with >100GB free space, we'll use the final 4GB as
# a swap partition
added_space=$(( new_size - part_size ))
if [ $added_space -gt 209715200 ]; then
  new_size=$(( new_size - 8388608 ))
  swap_start=$(( part_start + new_size ))

  # Align swap partition start to 1MB boundary
  residue=$(( swap_start % 2048 ))
  if [ $residue -gt 0 ]; then
    swap_start=$(( swap_start + 2048 - residue ))
    # might as well bump up root partition size too, instead of leaving a gap
    new_size=$(( new_size + 2048 - residue ))
  fi
fi

if [ $new_size -gt $part_size ]; then
  echo "Try to resize $root_part to fill $new_size sectors"
  parts=$(echo "$parts" | sed -e "$ s/size=[0-9\t ]*,/size=$new_size,/")
fi

if [ -n "$swap_start" ]; then
  # Create swap partition
  echo "Create swap partition at $swap_start"
  parts="$parts
start=$swap_start, type=82"
fi

# Reset partition indexes
root_disk_dev=${root_disk#/dev/}
parts=$(echo "$parts" | sed -e "s/${root_disk_dev}[^: ]\+//")

# GPT -> DOS
parts=$(echo "$parts" | sed -e "s/label: gpt/label: dos/")

# Set MBR partition type
parts=$(echo "$parts" | sed -e "s/, type=$dps_root_guid/, type=83/")
# Remove partition UUIDs and GPT attributes
parts=$(echo "$parts" | sed -e "s/, \(uuid\|attrs\)=[^\s,]\+//g")

echo "$parts"
echo "$parts" | sfdisk --force --no-reread $root_disk
udevadm settle
partprobe "${root_disk}"
udevadm settle

# mkswap with the new partition index
swap_partno=$((swap_partno - 2))
swap_part=${root_part_base}${swap_partno}
[ -e "$swap_part" ] && mkswap -L eos-swap $swap_part

# Remove GPT headers. It's a little tricky to work out where the backup one is
# from sfdisk's output, but we can get it from the primary header:
# https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_table_header_.28LBA_1.29
backup_gpt_offset=$(
  dd if=${root_disk} bs=1 count=8 skip=$(( 512 + 0x20 )) | python -c \
    'import sys, struct; print struct.unpack("<Q", sys.stdin.read(8))[0]'
)
backup_gpt="$(dd if=${root_disk} bs=512 skip=${backup_gpt_offset} count=1)"
if [ "${backup_gpt::8}" != "EFI PART" ]; then
  echo "$0: couldn't find backup GPT header at ${backup_gpt_offset}" >&2
  exit 1
fi
dd if=/dev/zero of=${root_disk} conv=fsync bs=512 count=1 seek=1
udevadm settle
dd if=/dev/zero of=${root_disk} conv=fsync bs=512 count=1 seek=${backup_gpt_offset}
udevadm settle

# Restore bootloader
root_mountpoint=$(mktemp -d)
mount "${root_part_base}$((root_partno - 2))" ${root_mountpoint}
dd if=${root_mountpoint}/boot/grub/i386-pc/boot.img of=${root_disk} bs=446 count=1 conv=fsync
udevadm settle
dd if=${root_mountpoint}/boot/grub/i386-pc/core.img of=${root_disk} bs=512 seek=1 conv=fsync
udevadm settle
umount ${root_mountpoint}
rmdir ${root_mountpoint}
