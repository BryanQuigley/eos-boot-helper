#!/bin/bash
set -e
shopt -s nullglob

NV_CURRENT=/usr/lib/nvidia/current
NV_KERNEL_OBJ=${NV_CURRENT}/kernel-obj
MODULE_DIR=/var/lib/endless-external-drivers/nvidia

NV_DEVICE=$(lspci -mn | awk '{ gsub("\"",""); if (($2 == "0300" || $2 == "0302") && ($3 == "10de" || $3 == "12d2")) { print toupper($3)toupper($4) } }' | head -n 1)

if [[ -z ${NV_DEVICE} ]]; then
  exit 0
fi

echo "Found nvidia device ${NV_DEVICE}"

# Load a module from a .ko file after first trying to load it's dependencies
# using modprobe.
load_module() {
	local deps=$(modinfo -F depends "$1")
	if [[ -n $deps ]]; then
		modprobe -a -q ${deps//,/ } || :
	fi
	insmod "$1" || :
}

# Build the nvidia module if we haven't already built the current
# ostree-shipped driver version for the currently running kernel.
build_nvidia_if_needed() {
  local running_kernel_version=$(uname -r)
  local nvidia_ostree_version
  local built_driver_version
  local built_kernel_version

  if [[ -e "${NV_KERNEL_OBJ}/version" ]]; then
    nvidia_ostree_version=$(<${NV_KERNEL_OBJ}/version)
  fi
  if [[ -e "${MODULE_DIR}/driver-version" ]]; then
    built_driver_version=$(<${MODULE_DIR}/driver-version)
  fi
  if [[ -e "${MODULE_DIR}/kernel-version" ]]; then
    built_kernel_version=$(<${MODULE_DIR}/kernel-version)
  fi

  echo "Kernel version: running=${running_kernel_version} built=${built_kernel_version}"
  echo "Driver version: shipped=${nvidia_ostree_version} built=${built_driver_version}"

  # If we've built the driver for the kernel we're running, and it's the same
  # driver version as the one in the ostree, then we have nothing to do
  if [[ "${built_kernel_version}" == "$(uname -r)" ]] &&
     [[ "${built_driver_version}" == "${nvidia_ostree_version}" ]]; then
    return
  fi

  # Otherwise, build needed.
  echo "Building driver"
  rm -rf "${MODULE_DIR}"
  mkdir -p "${MODULE_DIR}"
  OUTPREFIX="${MODULE_DIR}/" "${NV_KERNEL_OBJ}/build" || return

  # Append signatures, if we have them
  local kmod
  for kmod in ${MODULE_DIR}/*.ko; do
    cat "${NV_KERNEL_OBJ}/$(basename $kmod).sig" >> ${kmod} 2>/dev/null || :
  done

  uname -r > "${MODULE_DIR}/kernel-version"
  cp "${NV_KERNEL_OBJ}/version" "${MODULE_DIR}/driver-version"
}

# If no user accounts are available, assume we're still in the factory
# and hence properietary drivers should be erased
first_boot_cleanup_modules()
{
  local homedirs=( /home/* )
  if [[ ${#homedirs[@]} == 0 ]]; then
    rm -rf /var/lib/endless-external-drivers/nvidia
  fi
}

hdmi_audio_hw_check() {
  local nv_dev=$1

  # Allow forced override
  [[ -e "${MODULE_DIR}"/force-enable-hdmi-audio ]] && return 0

  local gpu_count=$(lspci -mn |
    awk '{ gsub("\"",""); if ($2 == "0300" || $2 == "0302") { count++ } } END {print count}')

  # If we have multiple GPUs, assume that the non-NVIDIA GPU drives HDMI.
  [[ "${gpu_count}" == 1 ]] || return 1

  # Only apply the quirk to devices where we have verified the 0x488 trick
  local -a devs_to_quirk=(
    10DE1BE1 # GeForce GTX 1070
  )

  local found=
  for i in "${devs_to_quirk[@]}"; do
    [ "$i" == "${NV_DEVICE}" ] && found=1
  done
  [[ -z "${found}" ]] && return 1

  # Check if audio device was already enabled by the BIOS
  local val=0x$(setpci -s ${nv_dev} 0x488.l)
  [[ "$((val & 0x02000000))" != 0 ]] && return 1

  return 0
}

# Some BIOSes boot with the HDMI audio device disabled.
# Detect this condition and enable the audio device.
# https://phabricator.endlessm.com/T20286
enable_nvidia_hdmi_audio() {
  local nv_dev=$(lspci -mn | awk '{ gsub("\"",""); if (($2 == "0300" || $2 == "0302") && ($3 == "10de" || $3 == "12d2")) { print $1 } }' | head -n 1)

  hdmi_audio_hw_check "${nv_dev}" || return 0

  # Check our assumption that the parent bridge is always 00:01.0
  if ! [[ -e "/sys/devices/pci0000:00/0000:00:01.0/0000:${nv_dev}" ]]; then
    echo "Not enabling HDMI audio, PCI parent bridge mismatch"
    return 0
  fi

  echo "Force-enabling HDMI audio device"
  setpci -s "${nv_dev}" 0x488.l=0x02000000:0x02000000
  echo 1 > /sys/bus/pci/devices/0000:${nv_dev}/remove
  echo 1 > /sys/bus/pci/devices/0000:00:01.0/rescan
  return 0
}

if ! modprobe -c | grep -F -x --quiet "blacklist nvidia" &&
   grep --quiet -F ${NV_DEVICE} ${NV_CURRENT}/nvidia.ids; then

  build_nvidia_if_needed

  enable_nvidia_hdmi_audio

  echo "Loading nvidia modules"
  load_module "${MODULE_DIR}"/nvidia.ko
  load_module "${MODULE_DIR}"/nvidia-modeset.ko
  load_module "${MODULE_DIR}"/nvidia-drm.ko
  first_boot_cleanup_modules
  if [[ -e "/sys/module/nvidia_drm" ]]; then
    echo "nvidia loaded successfully"
    exit 0
  fi

  # Try to unload anything that loaded
  echo "nvidia load failed"
  rmmod nvidia-drm || :
  rmmod nvidia-modeset || :
  rmmod nvidia || :
fi

# nouveau selected, or we want to use nouveau because nvidia build/load failed

# nouveau claims all devices based on the nvidia vendor IDs so we don't
# need to do a specific product ID lookup here, just load it.
echo "Loading nouveau"
modprobe nouveau
